{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","className","type","value","placeholder","onChange","handleInputChange","Result","state","city","sunrise","sunset","temp","feelTemp","tempMin","tempMax","wind","pressure","humidity","clouds","error","content","sunriseTime","Date","toLocaleTimeString","hour","minute","sunsetTime","windFormat","toFixed","tempFormat","Math","floor","feelTempFormat","tempMinFormat","tempMaxFormat","App","useState","setValue","setCity","setSunrise","setSunset","setTemp","setFeelTemp","setTempMin","setTempMax","setWind","setPressure","setHumidity","setClouds","setError","useEffect","length","API","fetch","then","res","ok","Error","json","data","sys","main","feels_like","temp_min","temp_max","speed","all","catch","err","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dac5be72.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Form.css';\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <form>\r\n            <input className=\"find\" type=\"text\" value={props.value} placeholder=\"Wpisz miasto\" onChange={props.handleInputChange} />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport '../styles/Result.css';\r\n\r\nconst Result = (props) => {\r\n\r\n    const {city, sunrise, sunset, temp, feelTemp, tempMin, tempMax, wind, pressure, humidity, clouds, error} = props.state;\r\n\r\n    let content = null;\r\n\r\n    if(!error && city) {\r\n        // change display data\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n        const windFormat = (wind * 3.6).toFixed();\r\n        const tempFormat = Math.floor(temp);\r\n        const feelTempFormat = Math.floor(feelTemp);\r\n        const tempMinFormat = Math.floor(tempMin);\r\n        const tempMaxFormat = Math.floor(tempMax);\r\n        \r\n        content = (\r\n            <div>\r\n                <h2 className=\"city\">{city}</h2>\r\n                <ul>\r\n                    <li>Temperatura: {tempFormat}&deg;C</li>\r\n                    <li>{tempMaxFormat}&deg;C / {tempMinFormat}&deg;C odczuwalna: {feelTempFormat}&deg;C</li>\r\n                    <li>Ciśnienie: {pressure} hPa</li>\r\n                    <li>Wiatr: {windFormat} km/h</li>\r\n                    <li>Wilgotność: {humidity} %</li>                    \r\n                    <li>Zachmurzenie: {clouds} %</li>\r\n                    <li>Wschód: {sunriseTime}</li>\r\n                    <li>Zachód: {sunsetTime}</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            {error ? <span className=\"failed\">Nie ma w bazie miasta: <strong>{city}</strong></span> : content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, {useState, useEffect} from 'react';\nimport '../styles/App.css';\nimport Form from './Form';\nimport Result from './Result';\n\nconst APIKey = '059fc2bde23efaa5a72e210b4d5fe2cc';\n\nconst App = () => {\n\n  const [value, setValue] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [sunrise, setSunrise] = useState(\"\");\n  const [sunset, setSunset] = useState(\"\");\n  const [temp, setTemp] = useState(\"\");\n  const [feelTemp, setFeelTemp] = useState(\"\");\n  const [tempMin, setTempMin] = useState(\"\");\n  const [tempMax, setTempMax] = useState(\"\");\n  const [wind, setWind] = useState(\"\");\n  const [pressure, setPressure] = useState(\"\");\n  const [humidity, setHumidity] = useState(\"\");\n  const [clouds, setClouds] = useState(\"\");\n  // const [icon, setIcon] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleInputChange = e => {\n    setValue(e.target.value);\n  }  \n\n  useEffect(() => {\n    if(value.length === 0) return;\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${value}&appid=${APIKey}&units=metric`;  \n    fetch(API)\n    .then(res => {\n      if (res.ok) {\n        return res\n      }\n      throw Error()\n    })\n    .then(res => res.json())\n    .then(data => {\n      setError(false);\n      setCity(value);\n      setSunrise(data.sys.sunrise);\n      setSunset(data.sys.sunset);\n      setTemp(data.main.temp);\n      setFeelTemp(data.main.feels_like);\n      setTempMin(data.main.temp_min);\n      setTempMax(data.main.temp_max);\n      setWind(data.wind.speed);\n      setPressure(data.main.pressure);\n      setHumidity(data.main.humidity);\n      setClouds(data.clouds.all);\n      // setIcon(data.weather[0].icon);\n    })\n    .catch(err => {\n      setError(true);\n      setCity(value)\n    })\n  },[value])\n\n  const state = {city, sunrise, sunset, temp, feelTemp, tempMin, tempMax, wind, pressure, humidity, clouds, error}\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Aplikacja pogodowa</h1>\n      <Form value={value} handleInputChange={handleInputChange} />\n      <hr/>\n      <Result state={state} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}